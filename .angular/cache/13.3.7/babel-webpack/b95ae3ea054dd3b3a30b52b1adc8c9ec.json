{"ast":null,"code":"import { InjectionToken, NgModule } from '@angular/core';\nimport { defineDriver, createInstance, INDEXEDDB, WEBSQL, LOCALSTORAGE } from 'localforage';\nimport * as CordovaSQLiteDriver from 'localforage-cordovasqlitedriver';\nimport { _driver } from 'localforage-cordovasqlitedriver';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Storage is an easy way to store key/value pairs and JSON objects.\n * Storage uses a variety of storage engines underneath, picking the best one available\n * depending on the platform.\n *\n * When running in a native app context, Storage will prioritize using SQLite, as it's one of\n * the most stable and widely used file-based databases, and avoids some of the\n * pitfalls of things like localstorage and IndexedDB, such as the OS deciding to clear out such\n * data in low disk-space situations.\n *\n * When running in the web or as a Progressive Web App, Storage will attempt to use\n * IndexedDB, WebSQL, and localstorage, in that order.\n *\n * \\@usage\n * First, if you'd like to use SQLite, install the cordova-sqlite-storage plugin:\n * ```bash\n * ionic cordova plugin add cordova-sqlite-storage\n * ```\n *\n * Next, install the package (comes by default for Ionic apps > Ionic V1):\n * ```bash\n * npm install --save \\@ionic/storage\n * ```\n *\n * Next, add it to the imports list in your `NgModule` declaration (for example, in `src/app/app.module.ts`):\n *\n * ```typescript\n * import { IonicStorageModule } from '\\@ionic/storage';\n *\n * \\@NgModule({\n *   declarations: [\n *     // ...\n *   ],\n *   imports: [\n *     BrowserModule,\n *     IonicModule.forRoot(MyApp),\n *     IonicStorageModule.forRoot()\n *   ],\n *   bootstrap: [IonicApp],\n *   entryComponents: [\n *     // ...\n *   ],\n *   providers: [\n *     // ...\n *   ]\n * })\n * export class AppModule {}\n * ```\n *\n * Finally, inject it into any of your components or pages:\n * ```typescript\n * import { Storage } from '\\@ionic/storage';\n * export class MyApp {\n *   constructor(private storage: Storage) { }\n *\n *   ...\n *\n *   // set a key/value\n *   storage.set('name', 'Max');\n *\n *   // Or to get a key/value pair\n *   storage.get('age').then((val) => {\n *     console.log('Your age is', val);\n *   });\n * }\n * ```\n *\n *\n * ### Configuring Storage\n *\n * The Storage engine can be configured both with specific storage engine priorities, or custom configuration\n * options to pass to localForage. See the localForage config docs for possible options: https://github.com/localForage/localForage#configuration\n *\n * Note: Any custom configurations will be merged with the default configuration\n *\n * ```typescript\n * import { IonicStorageModule } from '\\@ionic/storage';\n *\n * \\@NgModule({\n *   declarations: [...],\n *   imports: [\n *     IonicStorageModule.forRoot({\n *       name: '__mydb',\n * driverOrder: ['indexeddb', 'sqlite', 'websql']\n *     })\n *   ],\n *   bootstrap: [...],\n *   entryComponents: [...],\n *    providers: [...]\n * })\n * export class AppModule { }\n * ```\n */\n\nimport * as ɵngcc0 from '@angular/core';\n\nclass Storage {\n  /**\n   * Create a new Storage instance using the order of drivers and any additional config\n   * options to pass to LocalForage.\n   *\n   * Possible driver options are: ['sqlite', 'indexeddb', 'websql', 'localstorage'] and the\n   * default is that exact ordering.\n   * @param {?} config\n   */\n  constructor(config) {\n    this._driver = null;\n    this._dbPromise = new Promise((resolve, reject) => {\n      let\n      /** @type {?} */\n      db;\n      const\n      /** @type {?} */\n      defaultConfig = getDefaultConfig();\n      const\n      /** @type {?} */\n      actualConfig = Object.assign(defaultConfig, config || {});\n      defineDriver(CordovaSQLiteDriver).then(() => {\n        db = createInstance(actualConfig);\n      }).then(() => db.setDriver(this._getDriverOrder(actualConfig.driverOrder))).then(() => {\n        this._driver = db.driver();\n        resolve(db);\n      }).catch(reason => reject(reason));\n    });\n  }\n  /**\n   * Get the name of the driver being used.\n   * @return {?} Name of the driver\n   */\n\n\n  get driver() {\n    return this._driver;\n  }\n  /**\n   * Reflect the readiness of the store.\n   * @return {?} Returns a promise that resolves when the store is ready\n   */\n\n\n  ready() {\n    return this._dbPromise;\n  }\n  /**\n   * @hidden\n   * @param {?} driverOrder\n   * @return {?}\n   */\n\n\n  _getDriverOrder(driverOrder) {\n    return driverOrder.map(driver => {\n      switch (driver) {\n        case 'sqlite':\n          return _driver;\n\n        case 'indexeddb':\n          return INDEXEDDB;\n\n        case 'websql':\n          return WEBSQL;\n\n        case 'localstorage':\n          return LOCALSTORAGE;\n      }\n    });\n  }\n  /**\n   * Get the value associated with the given key.\n   * @param {?} key the key to identify this value\n   * @return {?} Returns a promise with the value of the given key\n   */\n\n\n  get(key) {\n    return this._dbPromise.then(db => db.getItem(key));\n  }\n  /**\n   * Set the value for the given key.\n   * @param {?} key the key to identify this value\n   * @param {?} value the value for this key\n   * @return {?} Returns a promise that resolves when the key and value are set\n   */\n\n\n  set(key, value) {\n    return this._dbPromise.then(db => db.setItem(key, value));\n  }\n  /**\n   * Remove any value associated with this key.\n   * @param {?} key the key to identify this value\n   * @return {?} Returns a promise that resolves when the value is removed\n   */\n\n\n  remove(key) {\n    return this._dbPromise.then(db => db.removeItem(key));\n  }\n  /**\n   * Clear the entire key value store. WARNING: HOT!\n   * @return {?} Returns a promise that resolves when the store is cleared\n   */\n\n\n  clear() {\n    return this._dbPromise.then(db => db.clear());\n  }\n  /**\n   * @return {?} Returns a promise that resolves with the number of keys stored.\n   */\n\n\n  length() {\n    return this._dbPromise.then(db => db.length());\n  }\n  /**\n   * @return {?} Returns a promise that resolves with the keys in the store.\n   */\n\n\n  keys() {\n    return this._dbPromise.then(db => db.keys());\n  }\n  /**\n   * Iterate through each key,value pair.\n   * @param {?} iteratorCallback a callback of the form (value, key, iterationNumber)\n   * @return {?} Returns a promise that resolves when the iteration has finished.\n   */\n\n\n  forEach(iteratorCallback) {\n    return this._dbPromise.then(db => db.iterate(iteratorCallback));\n  }\n\n}\n/**\n * @hidden\n * @return {?}\n */\n\n\nfunction getDefaultConfig() {\n  return {\n    name: '_ionicstorage',\n    storeName: '_ionickv',\n    dbKey: '_ionickey',\n    driverOrder: ['sqlite', 'indexeddb', 'websql', 'localstorage']\n  };\n}\n/**\n * @hidden\n */\n\n\nconst\n/** @type {?} */\nStorageConfigToken = new InjectionToken('STORAGE_CONFIG_TOKEN');\n/**\n * @hidden\n * @param {?} storageConfig\n * @return {?}\n */\n\nfunction provideStorage(storageConfig) {\n  const\n  /** @type {?} */\n  config = !!storageConfig ? storageConfig : getDefaultConfig();\n  return new Storage(config);\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nlet IonicStorageModule = /*#__PURE__*/(() => {\n  class IonicStorageModule {\n    /**\n     * @param {?=} storageConfig\n     * @return {?}\n     */\n    static forRoot(storageConfig = null) {\n      return {\n        ngModule: IonicStorageModule,\n        providers: [{\n          provide: StorageConfigToken,\n          useValue: storageConfig\n        }, {\n          provide: Storage,\n          useFactory: provideStorage,\n          deps: [StorageConfigToken]\n        }]\n      };\n    }\n\n  }\n\n  IonicStorageModule.ɵfac = function IonicStorageModule_Factory(t) {\n    return new (t || IonicStorageModule)();\n  };\n\n  IonicStorageModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: IonicStorageModule\n  });\n  IonicStorageModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n  return IonicStorageModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nexport { StorageConfigToken, Storage, IonicStorageModule, provideStorage as ɵa }; //# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":null,"metadata":{},"sourceType":"module"}