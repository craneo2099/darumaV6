{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@ionic/storage\";\nexport let DarumaService = /*#__PURE__*/(() => {\n  class DarumaService {\n    constructor(http, storage) {\n      this.http = http;\n      this.storage = storage; //console.log('Hello DarumaServiceProvider Provider');\n      //produccion\n\n      this.darumaUrl = \"https://koinobori-artesanias.com/darumas/public/\"; //Proxy pruebas\n      //this.darumaUrl = \"/darumaUrl/\";\n      //  this.darumaUrl = \"http://devstar-novatech.com/koin/darumas/public/\";\n    }\n\n    doLogin(loginData) {\n      console.log(\"provider\", loginData);\n      this.datosLogin = loginData;\n      const httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json',\n          \"Authorization\": \"\"\n        })\n      };\n      return this.respuesta = this.http.post(this.darumaUrl + \"loginApp/login\", this.datosLogin, httpOptions); // .retry(3)\n      // .catch(err =>{\n      //   console.log(\"errServ\",err);\n      //   return Observable.of(err);\n      // })\n    }\n\n    getToken() {\n      return this.storage.get('tokenS');\n    }\n\n    getUser() {\n      return this.storage.get('userS');\n    }\n\n    getNewDaruma() {\n      return this.storage.get('newDAruma');\n    }\n\n    borraToken() {\n      return this.storage.remove('tokenS');\n    }\n\n    getDarumas(token) {\n      // console.log(\"tokInGetDar\", token);\n      const httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json',\n          \"Authorization\": token\n        })\n      };\n      this.datos = {\n        clave: null,\n        darumas: null\n      };\n      return this.http.post(this.darumaUrl + \"DarumasWS/getDarumas\", this.datos, httpOptions);\n    }\n\n    getDarumasDetalle(daruma, token) {\n      console.log(\"tokInGetDarDet\", token);\n      const httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json',\n          \"Authorization\": token\n        })\n      };\n      return this.http.post(this.darumaUrl + \"DarumasWS/getDarumas\", daruma, httpOptions);\n    }\n\n    isQrCodeRegistrado(qrCode, token) {\n      // console.log(\"isQrCodeRegistrado\", qrCode);\n      const httpOptions = {\n        headers: new HttpHeaders({\n          \"Authorization\": token\n        })\n      };\n      this.datosAsignar = {\n        \"qrCode\": qrCode\n      }; // return this.http.post(this.darumaUrl + \"DarumasWS/asignar\", this.datosAsignar\n\n      return this.http.get(this.darumaUrl + \"QrCodeWS/isQrCodeRegistrado\" + \"?qrCode\" + \"=\" + qrCode //return this.http.get(this.darumaUrl + \"QrCodeWS/isQrCodeAsignado\"+\"?qrCode\"+\"=\"+qrCode\n      , httpOptions);\n    }\n\n    isQrCodeAsignado(qrCode, token) {\n      // console.log(\"qrText22\", qrCode);\n      const httpOptions = {\n        headers: new HttpHeaders({\n          \"Authorization\": token\n        })\n      };\n      this.datosAsignar = {\n        \"qrCode\": qrCode\n      };\n      return this.http.get(this.darumaUrl + 'QrCodeWS/isQrCodeAsignado' + '?qrCode' + '=' + qrCode, httpOptions);\n    }\n\n    requerirPass(correo, infoCaptcha) {\n      // console.log(\"Correo\", correo);\n      // console.log(\"captcha\", infoCaptcha);\n      const httpOptions = {\n        headers: new HttpHeaders({\n          \"Authorization\": infoCaptcha[\"token\"]\n        })\n      };\n      return this.http.get(this.darumaUrl + \"loginApp/requerirPass?email=\" + correo + \"&word=\" + infoCaptcha[\"word\"], httpOptions);\n    }\n\n    actualizarPass(datos, token) {\n      const httpOptions = {\n        headers: new HttpHeaders({\n          \"Authorization\": token\n        })\n      };\n      return this.http.post(this.darumaUrl + \"registro/setPass\", datos, httpOptions);\n    }\n\n    obtenerCaptcha() {\n      return this.http.get(this.darumaUrl + \"loginApp/getCaptcha\");\n    }\n\n    doRegistrarUsuario(data, token) {\n      // console.log(\"data\", data);\n      // console.log(\"token\", token);\n      const httpOptions = {\n        headers: new HttpHeaders({\n          \"Authorization\": token\n        })\n      };\n      return this.http.post(this.darumaUrl + \"registro/alta\", data, httpOptions);\n    }\n\n    isAsignaDaruma(qrCode, token) {\n      // console.log(\"qrText\", qrCode);\n      // console.log(\"qrToken\", token);\n      const httpOptions = {\n        headers: new HttpHeaders({\n          \"Authorization\": token\n        })\n      };\n      this.datosAsignar = {\n        \"qrCode\": qrCode\n      };\n      return this.http.post(this.darumaUrl + \"DarumasWS/asignar\", this.datosAsignar, httpOptions);\n    }\n\n    doActivaDaruma(daruma, proposito, nombre) {\n      //console.log(\"EntraActivar\", proposito);\n      // console.log(\"EntraToken\", daruma[\"token\"]);\n      // console.log(\"EntraQR\", daruma[\"qrCode\"]);\n      let tok = daruma[\"token\"];\n      const httpOptions = {\n        headers: new HttpHeaders({\n          \"Authorization\": tok\n        })\n      };\n      let Daruma = {\n        \"qrcode\": daruma[\"qrCode\"],\n        \"descripcion\": proposito,\n        \"nombre\": nombre\n      };\n      return this.http.post(this.darumaUrl + \"DarumasWS/activar\", Daruma, httpOptions);\n    }\n\n    completarDaruma(qrcode, token) {\n      // console.log(\" completAqrcode \",qrcode, \" token \", token);\n      const httpOptions = {\n        headers: new HttpHeaders({\n          \"Authorization\": token\n        })\n      };\n      let Daruma = {\n        \"qrCode\": qrcode\n      };\n      return this.http.post(this.darumaUrl + \"DarumasWS/completar\", Daruma, httpOptions);\n    }\n\n    eliminarCuenta(token) {\n      const httpOptions = {\n        headers: new HttpHeaders({\n          \"Authorization\": token\n        })\n      };\n      let datos = {\n        clave: null,\n        darumas: null\n      };\n      return this.http.post(this.darumaUrl + \"registro/baja\", datos, httpOptions);\n    }\n\n  }\n\n  DarumaService.ɵfac = function DarumaService_Factory(t) {\n    return new (t || DarumaService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Storage));\n  };\n\n  DarumaService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DarumaService,\n    factory: DarumaService.ɵfac,\n    providedIn: 'root'\n  });\n  return DarumaService;\n})();","map":null,"metadata":{},"sourceType":"module"}