{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';\nimport * as ɵngcc0 from '@angular/core';\n\nvar BarcodeScanner =\n/** @class */\nfunction (_super) {\n  __extends(BarcodeScanner, _super);\n\n  function BarcodeScanner() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.Encode = {\n      TEXT_TYPE: 'TEXT_TYPE',\n      EMAIL_TYPE: 'EMAIL_TYPE',\n      PHONE_TYPE: 'PHONE_TYPE',\n      SMS_TYPE: 'SMS_TYPE'\n    };\n    return _this;\n  }\n\n  BarcodeScanner.prototype.scan = function (options) {\n    return cordova(this, \"scan\", {\n      \"callbackOrder\": \"reverse\"\n    }, arguments);\n  };\n\n  BarcodeScanner.prototype.encode = function (type, data) {\n    return cordova(this, \"encode\", {}, arguments);\n  };\n\n  BarcodeScanner.pluginName = \"BarcodeScanner\";\n  BarcodeScanner.plugin = \"phonegap-plugin-barcodescanner\";\n  BarcodeScanner.pluginRef = \"cordova.plugins.barcodeScanner\";\n  BarcodeScanner.repo = \"https://github.com/phonegap/phonegap-plugin-barcodescanner\";\n  BarcodeScanner.platforms = [\"Android\", \"BlackBerry 10\", \"Browser\", \"iOS\", \"Windows\"];\n\n  BarcodeScanner.ɵfac = /*@__PURE__*/function () {\n    var ɵBarcodeScanner_BaseFactory;\n    return function BarcodeScanner_Factory(t) {\n      return (ɵBarcodeScanner_BaseFactory || (ɵBarcodeScanner_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(BarcodeScanner)))(t || BarcodeScanner);\n    };\n  }();\n\n  BarcodeScanner.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: BarcodeScanner,\n    factory: function (t) {\n      return BarcodeScanner.ɵfac(t);\n    }\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return BarcodeScanner;\n}(AwesomeCordovaNativePlugin);\n\nexport { BarcodeScanner }; //# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9AYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvcGx1Z2lucy9iYXJjb2RlLXNjYW5uZXIvbmd4L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sdUNBQStDLE1BQU0sK0JBQStCLENBQUM7O0FBQzVGO0FBR1EsSUE4RzRCLGtDQUEwQjtBQUFDO0FBRTdDO0FBSWYsUUFMRCxZQUFNLEdBS0Y7QUFDTixZQUFJLFNBQVMsRUFBRSxXQUFXO0FBQzFCLFlBQUksVUFBVSxFQUFFLFlBQVk7QUFDNUIsWUFBSSxVQUFVLEVBQUUsWUFBWTtBQUM1QixZQUFJLFFBQVEsRUFBRSxVQUFVO0FBQ3hCLFNBQUcsQ0FBQztBQUNKO0FBRWU7QUFBTSxJQVFuQiw2QkFBSSxhQUFDLE9BQStCO0FBS2IsSUFRdkIsK0JBQU0sYUFBQyxJQUFZLEVBQUUsSUFBUztBQUlkO0FBQWtEO0FBQThEO0FBQWlFO0FBQXdGO2tEQXhDMVIsVUFBVTs7OzswQkFDTDtBQUFDLHlCQW5IUDtBQUFFLEVBbUhrQywwQkFBMEI7QUFDN0QsU0FEWSxjQUFjO0FBQUkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb3Jkb3ZhLCBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL2NvcmUnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEJhcmNvZGVTY2FubmVyT3B0aW9ucyB7XG4gIC8qKlxuICAgKiBQcmVmZXIgZnJvbnQgY2FtZXJhLiBTdXBwb3J0ZWQgb24gaU9TIGFuZCBBbmRyb2lkLlxuICAgKi9cbiAgcHJlZmVyRnJvbnRDYW1lcmE/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBTaG93IGZsaXAgY2FtZXJhIGJ1dHRvbi4gU3VwcG9ydGVkIG9uIGlPUyBhbmQgQW5kcm9pZC5cbiAgICovXG4gIHNob3dGbGlwQ2FtZXJhQnV0dG9uPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogU2hvdyB0b3JjaCBidXR0b24uIFN1cHBvcnRlZCBvbiBpT1MgYW5kIEFuZHJvaWQuXG4gICAqL1xuICBzaG93VG9yY2hCdXR0b24/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBEaXNhYmxlIGFuaW1hdGlvbnMuIFN1cHBvcnRlZCBvbiBpT1Mgb25seS5cbiAgICovXG4gIGRpc2FibGVBbmltYXRpb25zPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogRGlzYWJsZSBzdWNjZXNzIGJlZXAuIFN1cHBvcnRlZCBvbiBpT1Mgb25seS5cbiAgICovXG4gIGRpc2FibGVTdWNjZXNzQmVlcD86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIFByb21wdCB0ZXh0LiBTdXBwb3J0ZWQgb24gQW5kcm9pZCBvbmx5LlxuICAgKi9cbiAgcHJvbXB0Pzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBGb3JtYXRzIHNlcGFyYXRlZCBieSBjb21tYXMuIERlZmF1bHRzIHRvIGFsbCBmb3JtYXRzIGV4Y2VwdCBgUERGXzQxN2AgYW5kIGBSU1NfRVhQQU5ERURgLlxuICAgKi9cbiAgZm9ybWF0cz86IHN0cmluZztcblxuICAvKipcbiAgICogT3JpZW50YXRpb24uIFN1cHBvcnRlZCBvbiBBbmRyb2lkIG9ubHkuIENhbiBiZSBzZXQgdG8gYHBvcnRyYWl0YCBvciBgbGFuZHNjYXBlYC4gRGVmYXVsdHMgdG8gbm9uZSBzbyB0aGUgdXNlciBjYW4gcm90YXRlIHRoZSBwaG9uZSBhbmQgcGljayBhbiBvcmllbnRhdGlvbi5cbiAgICovXG4gIG9yaWVudGF0aW9uPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBMYXVuY2ggd2l0aCB0aGUgdG9yY2ggc3dpdGNoZWQgb24gKGlmIGF2YWlsYWJsZSkuIFN1cHBvcnRlZCBvbiBBbmRyb2lkIG9ubHkuXG4gICAqL1xuICB0b3JjaE9uPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogU2F2ZSBzY2FuIGhpc3RvcnkuIERlZmF1bHRzIHRvIGBmYWxzZWAuIFN1cHBvcnRlZCBvbiBBbmRyb2lkIG9ubHkuXG4gICAqL1xuICBzYXZlSGlzdG9yeT86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIERpc3BsYXkgc2Nhbm5lZCB0ZXh0IGZvciBYIG1zLiAwIHN1cHByZXNzZXMgaXQgZW50aXJlbHksIGRlZmF1bHQgMTUwMC4gU3VwcG9ydGVkIG9uIEFuZHJvaWQgb25seS5cbiAgICovXG4gIHJlc3VsdERpc3BsYXlEdXJhdGlvbj86IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCYXJjb2RlU2NhblJlc3VsdCB7XG4gIGZvcm1hdDpcbiAgICB8ICdRUl9DT0RFJ1xuICAgIHwgJ0RBVEFfTUFUUklYJ1xuICAgIHwgJ1VQQ19FJ1xuICAgIHwgJ1VQQ19BJ1xuICAgIHwgJ0VBTl84J1xuICAgIHwgJ0VBTl8xMydcbiAgICB8ICdDT0RFXzEyOCdcbiAgICB8ICdDT0RFXzM5J1xuICAgIHwgJ0NPREVfOTMnXG4gICAgfCAnQ09EQUJBUidcbiAgICB8ICdJVEYnXG4gICAgfCAnUlNTMTQnXG4gICAgfCAnUlNTX0VYUEFOREVEJ1xuICAgIHwgJ1BERl80MTcnXG4gICAgfCAnQVpURUMnXG4gICAgfCAnTVNJJztcbiAgY2FuY2VsbGVkOiBib29sZWFuO1xuICB0ZXh0OiBzdHJpbmc7XG59XG5cbi8qKlxuICogQG5hbWUgQmFyY29kZSBTY2FubmVyXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBCYXJjb2RlIFNjYW5uZXIgUGx1Z2luIG9wZW5zIGEgY2FtZXJhIHZpZXcgYW5kIGF1dG9tYXRpY2FsbHkgc2NhbnMgYSBiYXJjb2RlLCByZXR1cm5pbmcgdGhlIGRhdGEgYmFjayB0byB5b3UuXG4gKlxuICogUmVxdWlyZXMgQ29yZG92YSBwbHVnaW46IGBwaG9uZWdhcC1wbHVnaW4tYmFyY29kZXNjYW5uZXJgLiBGb3IgbW9yZSBpbmZvLCBwbGVhc2Ugc2VlIHRoZSBbQmFyY29kZVNjYW5uZXIgcGx1Z2luIGRvY3NdKGh0dHBzOi8vZ2l0aHViLmNvbS9waG9uZWdhcC9waG9uZWdhcC1wbHVnaW4tYmFyY29kZXNjYW5uZXIpLlxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBCYXJjb2RlU2Nhbm5lciB9IGZyb20gJ0Bhd2Vzb21lLWNvcmRvdmEtcGx1Z2lucy9iYXJjb2RlLXNjYW5uZXIvbmd4JztcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGJhcmNvZGVTY2FubmVyOiBCYXJjb2RlU2Nhbm5lcikgeyB9XG4gKlxuICogLi4uXG4gKlxuICpcbiAqIHRoaXMuYmFyY29kZVNjYW5uZXIuc2NhbigpLnRoZW4oYmFyY29kZURhdGEgPT4ge1xuICogIGNvbnNvbGUubG9nKCdCYXJjb2RlIGRhdGEnLCBiYXJjb2RlRGF0YSk7XG4gKiB9KS5jYXRjaChlcnIgPT4ge1xuICogXHRjb25zb2xlLmxvZygnRXJyb3InLCBlcnIpO1xuICogfSk7XG4gKiBgYGBcbiAqIEBpbnRlcmZhY2VzXG4gKiBCYXJjb2RlU2Nhbm5lck9wdGlvbnNcbiAqIEJhcmNvZGVTY2FuUmVzdWx0XG4gKi9cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAnQmFyY29kZVNjYW5uZXInLFxuICBwbHVnaW46ICdwaG9uZWdhcC1wbHVnaW4tYmFyY29kZXNjYW5uZXInLFxuICBwbHVnaW5SZWY6ICdjb3Jkb3ZhLnBsdWdpbnMuYmFyY29kZVNjYW5uZXInLFxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL3Bob25lZ2FwL3Bob25lZ2FwLXBsdWdpbi1iYXJjb2Rlc2Nhbm5lcicsXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ0JsYWNrQmVycnkgMTAnLCAnQnJvd3NlcicsICdpT1MnLCAnV2luZG93cyddLFxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBCYXJjb2RlU2Nhbm5lciBleHRlbmRzIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luIHtcbiAgRW5jb2RlOiB7XG4gICAgVEVYVF9UWVBFOiBzdHJpbmc7XG4gICAgRU1BSUxfVFlQRTogc3RyaW5nO1xuICAgIFBIT05FX1RZUEU6IHN0cmluZztcbiAgICBTTVNfVFlQRTogc3RyaW5nO1xuICB9ID0ge1xuICAgIFRFWFRfVFlQRTogJ1RFWFRfVFlQRScsXG4gICAgRU1BSUxfVFlQRTogJ0VNQUlMX1RZUEUnLFxuICAgIFBIT05FX1RZUEU6ICdQSE9ORV9UWVBFJyxcbiAgICBTTVNfVFlQRTogJ1NNU19UWVBFJyxcbiAgfTtcblxuICAvKipcbiAgICogT3BlbiB0aGUgYmFyY29kZSBzY2FubmVyLlxuICAgKlxuICAgKiBAcGFyYW0ge0JhcmNvZGVTY2FubmVyT3B0aW9uc30gW29wdGlvbnNdIE9wdGlvbmFsIG9wdGlvbnMgdG8gcGFzcyB0byB0aGUgc2Nhbm5lclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggc2Nhbm5lciBkYXRhLCBvciByZWplY3RzIHdpdGggYW4gZXJyb3IuXG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgY2FsbGJhY2tPcmRlcjogJ3JldmVyc2UnLFxuICB9KVxuICBzY2FuKG9wdGlvbnM/OiBCYXJjb2RlU2Nhbm5lck9wdGlvbnMpOiBQcm9taXNlPEJhcmNvZGVTY2FuUmVzdWx0PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIEVuY29kZXMgZGF0YSBpbnRvIGEgYmFyY29kZS5cbiAgICogTk9URTogbm90IHdlbGwgc3VwcG9ydGVkIG9uIEFuZHJvaWRcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgVHlwZSBvZiBlbmNvZGluZ1xuICAgKiBAcGFyYW0ge2FueX0gZGF0YSBEYXRhIHRvIGVuY29kZVxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBlbmNvZGUodHlwZTogc3RyaW5nLCBkYXRhOiBhbnkpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxufVxuIl19","map":null,"metadata":{},"sourceType":"module"}