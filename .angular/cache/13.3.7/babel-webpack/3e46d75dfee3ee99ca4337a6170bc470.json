{"ast":null,"code":"import { __awaiter, __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { ELocalNotificationTriggerUnit } from '@ionic-native/local-notifications/ngx';\nlet DarumasGralPage = class DarumasGralPage {\n  constructor(router, ds, loadingCtrl, localNotifications, plt, alertCtrl, barcodeScanner, toastCtrl, storage, barcodeScannerOptions, menuCtrl) {\n    this.router = router;\n    this.ds = ds;\n    this.loadingCtrl = loadingCtrl;\n    this.localNotifications = localNotifications;\n    this.plt = plt;\n    this.alertCtrl = alertCtrl;\n    this.barcodeScanner = barcodeScanner;\n    this.toastCtrl = toastCtrl;\n    this.storage = storage;\n    this.barcodeScannerOptions = barcodeScannerOptions;\n    this.menuCtrl = menuCtrl;\n    this.url = \"./../../../assets/imgs/colores/\";\n  }\n\n  scheduleNotification() {\n    // console.log(\"EntraNoti\");\n    if (this.darumasIncompletos == true) {\n      // console.log(\"DarumasIncompletos\", this.darumasIncompletos);\n      this.localNotifications.hasPermission().then(permiso => {\n        //verifica permiso para notificaciones\n        // console.log(\"TienePermisoNotif\", permiso);\n        if (permiso == true) {\n          // tiene permiso\n          // console.log(\"Programa Notificaciones\");\n          this.localNotifications.schedule({\n            id: 1,\n            title: 'Tienes Darumas activos',\n            text: '\\u00A1Cumple tus prop\\u00F3sitos!',\n            // trigger: { at: new Date(new Date().getTime() + 40 * 1000) },\n            trigger: {\n              every: ELocalNotificationTriggerUnit.WEEK\n            },\n            data: {\n              myData: this.usuario\n            },\n            led: {\n              color: '#FF005E',\n              on: 500,\n              off: 500\n            },\n            icon: 'res://ic_action_name.png',\n            smallIcon: 'res://ic_stat_name'\n          });\n        } else {\n          // no tiene permiso Notificaciones\n          this.localNotifications.requestPermission().then(permisoRquest => {\n            //pide permiso Notificaciones\n            console.log(\"NotifRequest\", permisoRquest);\n          }).catch(e => console.log('Error requestPermissionNotif', e));\n        }\n      }).catch(e => console.log('Error permisoNotif', e));\n    }\n  }\n\n  verficaNotiYBorra() {\n    //verifica si ya hay una notificacion\n    this.localNotifications.getAll().then(obtnNoti => {\n      if (obtnNoti.length == 0) {// console.log(\"obtnNoti: nada\");\n      } else {\n        // console.log(\"obtnNoti\", obtnNoti);\n        // console.log(\"obtnNotiData\", JSON.parse(obtnNoti[\"0\"].data)[\"myData\"]);\n        this.localNotifications.cancelAll().then(cancelNoti => {\n          // console.log(\"cancelNoti\",cancelNoti);\n          this.localNotifications.clearAll().then(clearNoti => {// console.log(\"limpiaNoti\", clearNoti);\n          }).catch(e => console.log('Error clearAllNotif', e));\n        }).catch(e => console.log('Error cancelAllNotif', e));\n      }\n    }).catch(e => console.log('Error getAllNotif', e));\n  }\n\n  goToDetalle(qrcode, token) {\n    return __awaiter(this, void 0, void 0, function* () {\n      //peticion de daruma y mandarlo\n      this.loader = yield this.loadingCtrl.create();\n      yield this.loader.present();\n      let daruma = {\n        \"daruma\": {\n          \"qrcode\": qrcode\n        }\n      };\n      this.ds.getDarumasDetalle(daruma, token).subscribe(detalle => {\n        detalle[\"result\"].forEach(element => {\n          // console.log(\"detalle1\", element);\n          let navigationExtras = {\n            state: {\n              daruma: element,\n              token: this.toki\n            }\n          };\n          this.router.navigate(['detalle-daruma'], navigationExtras);\n        });\n      }, error => {\n        console.log(\"Error getDarumasDetalle\", error);\n      });\n    });\n  }\n\n  goToScanQr() {\n    // this.router.navigate(['add-daruma-qr']);\n    this.barcodeScanner.scan().then(barcodeData => {\n      console.log('Barcode data', barcodeData); // console.log(\"We got a barcode\\n\" +\n      // \"Result: \" + barcodeData.text + \"\\n\" +\n      // \"Format: \" + barcodeData.format + \"\\n\" +\n      // \"Cancelled: \" + barcodeData.cancelled);\n\n      if (barcodeData.cancelled == true) {\n        console.log(\"cancelado\");\n      } else {\n        this.barcodeScannerOptions.torchOn == true;\n\n        if (barcodeData.format == \"QR_CODE\") {\n          console.log(\"QR leido\");\n          this.ds.isQrCodeRegistrado(barcodeData.text, this.toki).subscribe(res => {\n            if (res[\"result\"] == true) {\n              let mensaje = \"Codigo Aceptado\"; // console.log(\"existe\");\n\n              console.log(\"resExiste\", res); /////////////Inicio////////////////////////\n\n              this.ds.isQrCodeAsignado(barcodeData.text, this.toki).subscribe(res2 => {\n                console.log(\"res2\", res2); // devuelve false cuando no existe el qrcode\n\n                if (res2[\"result\"] == false) {\n                  /////////////Fin/////////////////////////\n                  // console.log(\"no esta usado\");\n                  //se almacena\n                  let nuevoDaruma = {\n                    \"qrCode\": barcodeData.text,\n                    \"token\": this.toki,\n                    \"color\": res2[\"message\"]\n                  };\n                  this.storage.set(\"newDAruma\", nuevoDaruma);\n                  this.presentToast(mensaje);\n                  this.goToFormDaruma(); ///////////////Inicio///////////////////////\n                } else {\n                  let titulo = \"¡Error!\";\n                  let texto = \"El codigo ya ha sido usado\";\n                  this.doAlert(\"¡Atención!\", titulo, texto); // quitar comentario\n                  // this.navCtrl.setRoot(DarumasGralPage)\n                  // this.router.navigate(['darumas-gral']);\n                }\n              }, error => {\n                console.log(\"Error isQrCodeAsignado\", error);\n              }); ////////////////Fin////////////////////////\n            } else {\n              let titulo = \"¡Error!\";\n              let texto = \"El codigo es incorrecto\";\n              this.doAlert(\"¡Atención!\", texto, \"\"); // this.navCtrl.setRoot(DarumasGralPage)\n              // this.router.navigate(['darumas-gral']);\n            }\n          }, error => {\n            console.log(\"Error isQrCodeRegistrado\", error);\n          });\n        } else {\n          this.doAlert(\"¡Atención!\", \"Escanea un Código QR\", \"\");\n        }\n      }\n    }).catch(err => {\n      console.log('Error scanner', err);\n    });\n  }\n\n  cargaDarumasLst() {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.loader = yield this.loadingCtrl.create();\n      yield this.loader.present(); // mandar llamar servicio para traer darumas\n      //se deshabilita llamar al token\n      // this.ds.getToken().then((token)=>{\n      //   this.toki = token\n\n      this.ds.getDarumas(this.toki).subscribe(daruma => {\n        // console.log(\"EntraGetDarumas\", daruma );\n        if (daruma[\"result\"].length == 0) {\n          this.noDarumaFlag = true;\n        }\n\n        daruma[\"result\"].forEach(element => {\n          // console.log(\"qr \",element);\n          // elige color daruma\n          this.darumas.push(element);\n\n          if (element[\"estado\"] == 6 && this.darumasIncompletos == false) {\n            this.darumasIncompletos = true;\n            this.scheduleNotification();\n          }\n        });\n      }, error => {\n        this.loader.dismiss();\n        console.log(\"Error getDarumas\", error);\n        this.doAlertErrorCarga(\"¡Lo sentimos!\", \"Haz iniciado sesión en otro dispositivo.\", \"Inicia sesión nuevamente y ¡Cumple tus metas!\");\n      }, () => {\n        this.loader.dismiss();\n      }); // }).catch((e: any) => console.log('Error getToken', e));\n    });\n  }\n\n  obtieneUsuario() {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.loader = yield this.loadingCtrl.create();\n      this.ds.getUser().then(user => {\n        this.usuario = user;\n        console.log(\"usuario \", this.usuario);\n      }).catch(e => console.log('Error getUser', e));\n    });\n  }\n\n  doAlert(titulo, sub, mensaje) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let alert = yield this.alertCtrl.create({\n        header: titulo,\n        subHeader: sub,\n        message: mensaje,\n        backdropDismiss: false,\n        buttons: ['Ok']\n      });\n      yield alert.present();\n    });\n  }\n\n  doAlertErrorCarga(titulo, texto, mensaje) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let alert = this.alertCtrl.create({\n        header: titulo,\n        subHeader: texto,\n        message: mensaje,\n        backdropDismiss: false,\n        buttons: [{\n          text: 'Ok',\n          handler: () => {\n            //Borra Token y redirige a inicio\n            this.ds.borraToken().then(token => {\n              // console.log(\"tokenBorrado \");\n              this.router.navigate(['inicio-login']);\n            }).catch(e => console.log('Error borraToken', e));\n          }\n        }]\n      });\n      (yield alert).present();\n    });\n  }\n\n  alertOfNotification() {\n    this.plt.ready().then(() => {\n      this.localNotifications.on('trigger').subscribe(ras => {\n        //let user = ras.data ? ras.data.myData : '';\n        // console.log(\"msgOC\",user);\n        this.doAlert(ras.title, \"\", ras.text);\n      }, error => {// console.log(\"Error triggerNotifCons\", error);\n      });\n    }).catch(e => console.log('Error pltReadycons', e));\n  }\n\n  verificaToken() {\n    //verificar si hay un token para inicio de sesión\n    this.ds.getToken().then(token => {\n      if (token == null) {\n        console.log(\"No Token\");\n        this.router.navigate(['inicio-login']);\n      } else {\n        console.log(\"hayTokenIni: \", token);\n        this.toki = token;\n        this.darumas = [];\n        this.menuCtrl.isEnabled().then(res => {\n          // this.verificaToken();\n          if (res == false) {\n            this.menuCtrl.enable(true);\n          }\n\n          this.cargaDarumasLst();\n        }).catch(e => console.log('Error menuCtrlDGral', e));\n      }\n    }).catch(e => console.log('Error getToken', e));\n  }\n\n  presentToast(text) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let toast = yield this.toastCtrl.create({\n        message: text,\n        duration: 3000,\n        position: 'top'\n      });\n      yield toast.present();\n    });\n  }\n\n  goToFormDaruma() {\n    this.router.navigate(['formulario-daruma']);\n  }\n\n  ionViewWillEnter() {\n    this.obtieneUsuario();\n    this.noDarumaFlag = false;\n    this.darumasIncompletos = false;\n    this.verficaNotiYBorra();\n  }\n\n  ionViewDidEnter() {\n    this.verificaToken(); // console.log(\"tokiiiiii \", this.toki);\n    // if (this.toki != null) {\n    //   this.darumas = [];\n    //   this.cargaDarumasLst();\n    // }\n  }\n\n  ionViewDidLeave() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.loader.dismiss();\n    });\n  }\n\n  toggleMenu() {\n    this.menuCtrl.toggle();\n  }\n\n  ngOnInit() {}\n\n};\nDarumasGralPage = __decorate([Component({\n  selector: 'app-darumas-gral',\n  templateUrl: './darumas-gral.page.html',\n  styleUrls: ['./darumas-gral.page.scss']\n})], DarumasGralPage);\nexport { DarumasGralPage };","map":null,"metadata":{},"sourceType":"module"}